% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autoplot-sp_elev.R
\name{autoplot.elev}
\alias{autoplot.elev}
\title{Quick topography plot.}
\usage{
\method{autoplot}{elev}(object, contour_size = 0.5, low = "blue",
  high = "red", hide_color_legend = FALSE, bins = NULL,
  add_elevation_labels = TRUE, label_size = 3, label_color = "grey",
  xyjust = 1, fontface = "italic", xlim = NULL, ylim = NULL,
  custom_theme = NULL, ...)
}
\arguments{
\item{object}{An object created with \code{\link[=elev]{elev()}}.}

\item{contour_size}{A number giving the size of the contour of elevation
lines. Passed to \code{ggplot2::stat_contour()} (see \code{\link[ggplot2:geom_contour]{ggplot2::geom_contour()}}).}

\item{low, high}{A string giving a color of the elevation lines representing
low and high elevation.}

\item{hide_color_legend}{Logical; \code{TRUE} hides the color legend.}

\item{bins}{A number giving the number of elevation lines to map.}

\item{add_elevation_labels}{Logical; \code{FALSE} hides elevation labels.}

\item{label_size, label_color, fontface}{A number (\code{label_size}) or character
string (\code{label_color} and \code{fontface}) giving the size, colour and fontface
of the text labels for the elevation lines.}

\item{xyjust}{A number to adjust the position of the text labels of the
elevation lines.}

\item{xlim}{A vector of length 2, for example \code{c(0, 500)}, giving the
minimum and maximum limits of the vertical and horizontal coordinates.}

\item{ylim}{A vector of length 2, for example \code{c(0, 500)}, giving the
minimum and maximum limits of the vertical and horizontal coordinates.}

\item{custom_theme}{A valid \code{\link[ggplot2:theme]{ggplot2::theme()}}. \code{NULL} uses the default
theme \code{\link[=theme_default]{theme_default()}}.}

\item{...}{Arguments passed to autoplot.sp_elev()}
}
\value{
A "ggplot".
}
\description{
Automatically plot the \code{elev} variable of a ForestGEO-like dataset of class
'elev'. You can create an 'elev' \code{object} with:

\preformatted{object <- elev(DATA-WITH-VARIABLE-elev)
}

See sections \strong{Usage} and \strong{Examples}.
}
\section{Comparison with ggplot2}{

These functions wrap functions from the \strong{ggplot2} package. For more
control you can use \strong{ggplot2} directly or smaller wrappers in
\strong{fgeo.map} (see the sections See Also and Examples). \strong{ggplot2}
will give you maximum control and is your best choice if you are already
familiar with it. The wrapper functions in \strong{fgeo.map} focus on
ForestGEO's data: For example, their names commonly mention the variable of a
ForestGEO dataset they work with.

The most important difference between \strong{ggplot2} and \strong{fgeo.map}
is in the way you compose multiple functions to create complex plots. With
\strong{ggplot2} you compose multiple functions with \code{+}. For example,
to apply functions \code{f()} then \code{g()} you do something like this:
\code{f(data) + g()}. With \strong{fgeo.map} you compose multiple functions
in the usual way with \code{g(f(data))}, or in the modern way with the pipe:
\code{f(data)} \code{\%>\%} \code{g()} -- it is up to you. To learn more
about the pipe see http://r4ds.had.co.nz/pipes.html.
}

\examples{
elevation_list <- fgeo.data::luquillo_elevation
autoplot(elev(elevation_list))
# Same
autoplot(elev(elevation_list$col))

# Customize
autoplot(elev(elevation_list$col), contour_size = 1)
}
\seealso{
\code{\link[=autoplot]{autoplot()}}, \code{\link[=elev]{elev()}}.

Other autoplots: \code{\link{autoplot.fgeo_habitat}},
  \code{\link{autoplot.sp_elev}}

Other functions to plot elevation: \code{\link{autoplot.sp_elev}},
  \code{\link{autoplot_by_species.sp_elev}},
  \code{\link{elev}}, \code{\link{sp_elev}}
}
\concept{autoplots}
\concept{functions to plot elevation}
