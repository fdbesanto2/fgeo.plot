% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_plot.R
\name{map_plot}
\alias{map_plot}
\alias{map_plot}
\alias{map_elevation}
\alias{map_species}
\title{Map a census plot -- empty or with elevation.}
\usage{
map_plot(data = NULL, elevation = NULL, xlim = NULL, ylim = NULL,
  theme = theme_map_sp(), line_size = 0.5, low = "#132B43",
  high = "#f70404", bins = NULL, label_elev = TRUE)

map_elevation(data = NULL, elevation = NULL, xlim = NULL, ylim = NULL,
  theme = theme_map_sp(), line_size = 0.5, low = "#132B43",
  high = "#f70404", bins = NULL, label_elev = TRUE)

map_species(data, xlim = NULL, ylim = NULL, theme = theme_map_sp(),
  drop_fill = FALSE, shape = 21, ...)
}
\arguments{
\item{elevation}{A dataframe with variables gx, gy, and elev giving the
elevation of the site.}

\item{xlim, ylim}{A vector giving the limits of x, y axes, for example
\code{xlim = c(0, 1000), ylim = c(0, 500)}. Default limits should be OK -- they
are set to be c(0, max), where max is the maximum value of \code{gx} or \code{gy}
in the data set.}

\item{theme}{An object of class theme.}

\item{line_size}{A number to customize the width of the elevation lines.}

\item{low, high}{Colours to represent the range between low and high
elevation. Use colour names like \code{low = "black", high = "red"} or HEX
colours like \code{low = "#132B43", high = "#56B1F7"} (for more colours google
#132B43).}

\item{bins}{A number. Setting bins creates evenly spaced contours in the
range of the data. Integers}

\item{label_elev}{Logical; \code{FALSE} removes the labels of elevation lines.}
}
\value{
A ggplot.
}
\description{
\code{map_plot()} produces a base on top of which you can add any \strong{ggplot2}
layer (e.g. \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}} and \code{\link[ggplot2:facet_wrap_sp]{ggplot2::facet_wrap_sp()}}; also
\code{\link[=geom_point_sp]{geom_point_sp()}} and \code{\link[=facet_wrap_sp]{facet_wrap_sp()}}). \code{map_elevation()} is a wrapper
that forces elevation, and has an informative name.
}
\examples{
\dontrun{
library(ggplot2)

sp4 <- fgeo.tool::top(bciex::bci12s7mini, sp, 4)
bad_nms_elev <- bciex::bci_elevation
bci_elev <- dplyr::rename(bad_nms_elev, gx = x, gy = y)

map_plot(sp4)

# Same
elev1 <- map_plot(sp4, elevation = bci_elev)
# A small wrapper to make it easy to find this function by its name
elev2 <- map_elevation(sp4, elevation = bci_elev)
elev2
all.equal(elev1, elev2)

# This works but it is not equal. Nowhere we are giving census data.
elev3 <- map_elevation(elevation = bci_elev)
# This works because we are using the argument `data`
elev3 + geom_point_sp(data = sp4)
# But this fails
# elev3 + geom_point_sp()
# This works because we passed the data before
elev2 + geom_point_sp()

# See xlim, ylim at ?ggplot2::coord_fixed())
map_elevation(sp4, elevation = bci_elev, xlim = c(200, 600), ylim = c(0, 400))

map_plot(sp4) + geom_point_sp()
# Same: A small wrapper to make it easy to find this function by its name
map_species(sp4)
# See ?ggplot2::geom_point(), ?ggplot2::theme_gray().
map_species(sp4, size = 4, stroke = 2, xlim = c(0, 500), theme = theme_gray())


# See also ?ggplot2::facet_wrap()
map_species(sp4) + facet_wrap_sp()
# See ?graphics::points
map_species(sp4, drop_fill = TRUE) + facet_wrap_sp()

# See also ?ggplot2::facet_grid()
map_elevation(sp4, elevation = bci_elev) +
  geom_point_sp(drop_fill = TRUE) +
  facet_grid_sp_v()

map_elevation(sp4, elevation = bci_elev) +
  geom_point_sp(drop_fill = TRUE) +
  facet_grid_sp_h()
}
}
\seealso{
\code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}.
}
