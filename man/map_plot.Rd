% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_plot.R
\name{map_plot}
\alias{map_plot}
\alias{map_elevation}
\alias{map_species}
\title{Map a census plot -- empty or with elevation.}
\usage{
map_plot(data = NULL, elevation = NULL, xlim = NULL, ylim = NULL,
  theme = theme_map_sp(), line_size = 0.5, low = "#132B43",
  high = "#f70404", bins = NULL, label_elev = TRUE)

map_elevation(data = NULL, elevation = NULL, xlim = NULL, ylim = NULL,
  theme = theme_map_sp(), line_size = 0.5, low = "#132B43",
  high = "#f70404", bins = NULL, label_elev = TRUE)

map_species(data, elevation = NULL, xlim = NULL, ylim = NULL,
  theme = theme_map_sp(), drop_fill = FALSE, shape = 21,
  label_elev = TRUE, ...)
}
\arguments{
\item{data}{Dataframe passed to \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}.}

\item{elevation}{A dataframe with variables gx, gy, and elev giving the
elevation of the site.}

\item{xlim, ylim}{A vector giving the limits of x, y axes, for example
\code{xlim = c(0, 1000), ylim = c(0, 500)}. Default limits should be OK -- they
are set to be c(0, max), where max is the maximum value of \code{gx} or \code{gy}
in the data set.}

\item{theme}{An object of class theme.}

\item{line_size}{A number to customize the width of the elevation lines.}

\item{low, high}{Colours to represent the range between low and high
elevation. Use colour names like \code{low = "black", high = "red"} or HEX
colours like \code{low = "#132B43", high = "#56B1F7"} (for more colours google
#132B43).}

\item{bins}{A number. Setting bins creates evenly spaced contours in the
range of the data. Integers}

\item{label_elev}{Logical; \code{FALSE} removes the labels of elevation lines.}

\item{drop_fill}{Logical; \code{TRUE} drops the fill legend.}

\item{shape}{Numeric; Point shape passed to \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}.}

\item{...}{Arguments passed to \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}.}
}
\value{
A ggplot.
}
\description{
\code{map_plot()} produces a base on top of which you can add any \strong{ggplot2}
layer (e.g. \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}} and \code{\link[ggplot2:facet_wrap]{ggplot2::facet_wrap()}}; also
\code{\link[=geom_point_sp]{geom_point_sp()}} and \code{\link[=facet_wrap_sp]{facet_wrap_sp()}}).
\code{map_elevation()} and \code{map_species()} are convenient wrappers.
}
\examples{
\dontrun{
library(ggplot2)

sp2 <- fgeo.tool::top(bciex::bci12s7mini, sp, 2)
bad_nms_elev <- bciex::bci_elevation
bci_elev <- dplyr::rename(bad_nms_elev, gx = x, gy = y)

# Plot

map_plot(sp2)

map_plot(sp2, elevation = bci_elev)

map_plot(sp2, elevation = bci_elev) +
  geom_point_sp(data = sp2)

# Elevation

map_elevation(NULL, bci_elev)

map_elevation(bci_elev)

map_elevation(sp2)

map_elevation(sp2) +
  geom_point_sp(data = sp2) +
  facet_wrap_sp()

# Species

map_species(sp2)

map_species(sp2, bci_elev, drop_fill = TRUE, label_elev = FALSE, size = 4) +
  facet_wrap_sp() +
  guides(color = "none")

map_species(sp2) +
  facet_grid_sp_h()

map_species(sp2) +
  facet_grid_sp_v()
}
}
\seealso{
\code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}.
}
