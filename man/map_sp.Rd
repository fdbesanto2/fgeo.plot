% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_sp.R
\name{map_sp}
\alias{map_sp}
\title{Map the distribution of one, some or all species in a census data set.}
\usage{
map_sp(census, species, xlim = NULL, ylim = NULL,
  theme = ggplot2::theme_bw(), elevation = NULL, line_size = 0.5,
  low = "#132B43", high = "#56B1F7", bins = NULL, ...)
}
\arguments{
\item{census}{Census data.}

\item{species}{A string of the species codes to plot (\code{sp}).}

\item{xlim, ylim}{A vector giving the limits of x, y axes, for example
\code{xlim = c(0, 1000), ylim = c(0, 500)}. Default limits should be OK -- they
are set to be c(0, max), where max is the maximum value of \code{gx} or \code{gy}
in the data set.}

\item{theme}{An object of class theme.}

\item{elevation}{A dataframe with variables gx, gy, and elev giving the
elevation of the site.}

\item{line_size}{A number to customize the width of the elevation lines.}

\item{low, high}{Colours to represent the range between low and high
elevation. Use colour names like \code{low = "black", high = "red"} or HEX
colours like \code{low = "#132B43", high = "#56B1F7"} (for more colours google
#132B43).}

\item{bins}{A number. Setting bins creates evenly spaced contours in the
range of the data. Integers}

\item{...}{Arguments passed to \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}} to customize, for
example, the size, shape, or colour of the points.}
}
\value{
A list of which each element is a plot of class ggplot.
}
\description{
Map the distribution of one, some or all species in a census data set.
}
\section{Acknowledgement}{

Thanks to Gabriel Arellano and David Kenfack for ideas and feedback.
}

\examples{
\dontrun{
# Setup -------------------------------------------------------------------

# For easier data manipulation
library(dplyr)
# Print only a few rows of tibbles (modern dataframes) to save space
options(dplyr.print_min = 6, dplyr.print_max = 6)

# Quick exploration with defaults -----------------------------------------

# Example data. Converting dataframe to tibble for better printing
census <- as_tibble(bciex::bci12t7mini)

# Print to screen
map_sp(census, "hybapr")

# Print to .pdf -- one species per page of a single file
pdf()
map_sp(census, c("hybapr", "faraoc"))
dev.off()

# Add elevation data
elev <- bciex::bci_elevation

# Not the right names
names(elev)
elev <- rename(elev, gx = x, gy = y)
# OK now
elev

# Common changes ----------------------------------------------------------

# Changing points' properties
map_sp(
  census, "hybapr",
  # Passed to ggplot2::geom_point()
  size = 4, shape = 22, fill = "green", colour = "black", stroke = 2
)

# Changing lines' properties
map_sp(
  census, "hybapr",
  elevation = elev, line_size = 1, low = "red", high = "blue", bins = 10
)

# Dealing with overplotting
crowded <- dplyr::tibble(
  sp = sample(c("species1"), 10000, replace = TRUE),
  gx = sample.int(1000, 10000, replace = TRUE),
  gy = sample.int(500, 10000, replace = TRUE)
)
# Too crowded
map_sp(crowded, c("species1"))
# Less crowded
map_sp(
  crowded, c("species1"),
  # passing arguments to ggplot2::geom_point()
  size = 1, alpha = 5/10, shape = 21
)

# Changing theme
map_sp(census, "hybapr", theme = ggplot2::theme_classic())
map_sp(census, "hybapr", theme = ggplot2::theme_dark())
# For more options see ?ggplot2::theme_bw()

# Less common changes -----------------------------------------------------

# Changing limits
map_sp(census, "hybapr", xlim = c(0, 1500), ylim = c(0, 1000))

# Fine tunning ------------------------------------------------------------

library(ggplot2)
library(gridExtra)

# Multiple maps per page
three_species <- c("hybapr", "faraoc", "des2pa")
maps <- map_sp(census, three_species)
multipaged <- marrangeGrob(maps, nrow = 1, ncol = 2)
multipaged
# Saving to .pdf: Option 1
ggplot2::ggsave("my_multipaged.pdf", multipaged)
# Saving to .pdf: Option 2
pdf()
multipaged
dev.off()

# Custom theme; see all the options with ?ggplot2::theme()
my_theme <- ggplot2::theme(
  text = element_text(size = 25, face = "bold.italic", colour = "white"),
  plot.background = element_rect(fill = "black"),
  plot.margin = margin(2, 2, 2, 2, "cm"),
  strip.background = element_rect(fill = "darkgreen"),
  strip.text = element_text(colour = "white"),
  # make grid dissapear by matching background colour
  panel.background = element_rect(fill = "lightgreen"),
  panel.grid.minor = element_line(colour = "lightgreen"),
  panel.grid.major = element_line(colour = "lightgreen")
)
map_sp(census, "hybapr", theme = my_theme)


# Extending with ggplot2 --------------------------------------------------

# Adding new layers
p0 <- map_sp(census, c("hybapr", "faraoc"))
# To one element of the plots' list
p0[["hybapr"]] + geom_vline(aes(xintercept = 300), colour = "red")
# To all elements of the plots' list
p1 <- lapply(p0, `+`, geom_vline(aes(xintercept = 300), colour = "red"))
p1
p2 <- lapply(p1, `+`, geom_hline(aes(yintercept = 400), colour = "blue"))
p2
#' }
}
\seealso{
\code{\link[grDevices:pdf]{grDevices::pdf()}}, \code{\link[grDevices:png]{grDevices::png()}},
\code{\link[ggplot2:theme]{ggplot2::theme()}}.
}
