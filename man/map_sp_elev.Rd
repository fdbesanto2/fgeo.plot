% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maply_sp_elev.R
\name{map_sp_elev}
\alias{map_sp_elev}
\alias{map_elev}
\title{Map species and elevation data.}
\usage{
map_sp_elev(census, elevation = NULL, fill = "black", shape = 21,
  wrap = TRUE, point_size = 3, contour_size = 0.5, low = "blue",
  high = "red", hide_legend_color = FALSE, bins = NULL,
  label_elev = TRUE, label_size = 3, label_color = "grey",
  xyjust = 1, fontface = "italic", xlim = NULL, ylim = NULL,
  custom_theme = NULL)

map_elev(elevation, contour_size = 0.5, low = "blue", high = "red",
  hide_legend_color = FALSE, bins = NULL, label_elev = TRUE,
  label_size = 3, label_color = "grey", xyjust = 1,
  fontface = "italic", xlim = NULL, ylim = NULL,
  custom_theme = NULL)
}
\value{
\itemize{
\item \code{maply_sp_elev()} returns a list of ggplots.
\item \code{map_elev()} and \code{map_sp_elev()} return a ggplot.
}
}
\description{
These functions wrap a number of map elements for convenience:
\itemize{
\item Use \code{map_sp_elev()} to map species and optionally elevation data in a
single page. You can map multiple species on the same plot or you can facet
the output to map each species on a single plot and all plots in a single
page.
\item Use \code{map_elev()} if you want to map only elevation in the simplest way.
\item Use \code{maply_sp_elev()} to apply the function \code{map_sp_elev()} to each species
in a census dataset. The output is not a map but a list of maps, one per
species, that can be printed on a .pdf file.
}
}
\examples{
# Small dataset with a few species for quick examples
some_sp <- c("PREMON", "CASARB")
census <- subset(fgeo.data::luquillo_tree5_random, sp \%in\% some_sp)
elevation <- fgeo.data::luquillo_elevation

# Simplest way to map elevation data only
map_elev(elevation)

map_sp_elev(census)

map_sp_elev(census, elevation)

# For maximum control, you can compose maps as you like
# Traditional sintax: g(f(x))
contour_elev(map_gx_gy_elev(elevation))

# With the pipe: f(x) \%>\% g()
map_gx_gy_elev(elevation) \%>\%
  contour_elev()

# The traditional sintax is hard to read when you compose multiple functions.
# With the pipe, readability isn't affected by the number of functions.
map_gx_gy_elev(elevation) \%>\%
  limit_gx_gy(xlim = c(-100, 400)) \%>\%
  contour_elev(contour_size = 0.5) \%>\%
  label_elev(label_color = "red") \%>\%
  hide_axis_labels() \%>\%
  hide_legend_color() \%>\%
  add_sp(census, point_size = 5) \%>\%
  wrap("sp") \%>\%
  theme_default(legend.position = "top")
}
\concept{functions to create a single plot}
