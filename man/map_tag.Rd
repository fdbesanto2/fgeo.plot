% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_tag.R
\name{map_tag}
\alias{map_tag}
\title{Map tree tags by status, showing four subquadrats per plot-page.}
\usage{
map_tag(vft, x_q = 20, x_sq = 5, y_q = x_q, y_sq = x_sq,
  subquad_offset = NULL, bl = 1, br = 2, tr = 3, tl = 4,
  title_quad = "Site Name, YYYY. Quadrat:", show_page = TRUE,
  show_subquad = TRUE, point_shape = c(19, 4), point_size = 1.5,
  tag_size = 3, header = map_tag_header(), theme = theme_map_tag(),
  move_edge = 0)
}
\arguments{
\item{vft}{A dataframe -- specifically, a ForestGEO ViewFullTable.}

\item{x_q}{Size in meters of a quadrat's side. For ForestGEO sites, a
common value is 20.}

\item{x_sq}{Size in meters of a subquadrat's side. For ForestGEO-CTFS
sites, a common value is 5.}

\item{y_q}{Size in meters of a quadrat's side. For ForestGEO sites, a
common value is 20.}

\item{y_sq}{Size in meters of a subquadrat's side. For ForestGEO-CTFS
sites, a common value is 5.}

\item{subquad_offset}{\code{NULL} or \code{-1}. \code{NULL} defines the first column of
subquadrats as 1.  \code{-1} defines the first column of subquadrats as 0.\preformatted{subquad_offset = NULL    subquad_offset = -1
---------------------    -------------------
     14 24 34 44             04 14 24 34
     13 23 33 43             03 13 23 33
     12 22 32 42             02 12 22 32
     11 21 31 41             01 11 21 31
}}

\item{bl, br, tr, tl}{Label each of the four maps of a quadrat. See \code{\link[=paginate]{paginate()}}.}

\item{title_quad}{A string to use as a title.}

\item{show_page}{Logical; \code{FALSE} removes the page label from the map title.}

\item{show_subquad}{Logical; \code{FALSE} removes subquadrat labels on each map.}

\item{point_shape}{A vector of two numbers giving the shape of the points to
plot (see possible shapes in the documentation of ?\code{\link[graphics:points]{graphics::points()}},
under the section entitled \emph{'pch' values}).}

\item{point_size}{A number giving points size. Passed to
\code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}.}

\item{tag_size}{A number giving tag size. Passed to
[ggrepel::geom_text_repel].}

\item{header}{A string to use as a header (see [headers]).}

\item{theme}{An object of class theme.}

\item{move_edge}{A number to adjust the extension of the grid lines beyond
the plot limits.}
}
\value{
A list of ggplots, where each element of the list is a map of tree
tags by status, showing four subquadrats.
}
\description{
This function maps tree tags by status. Each map shows four subquadrats
within a quadrat.
}
\details{
\code{map_tag()} plots a status that refers to the tree -- not to each individual
stem. For a tree to plot as "dead", all its stems must be dead (for the
selected census); else the tree will plot as "alive".

From all censuses, this function will filter the one with greater numeric
value, and it will warn of such filtering. That is because most likely you
want information of the tree \code{Status} from the last census only. If this is
not what you want, here are some solutions:
\itemize{
\item If you want to map a different census: filter the census you want and feed
\code{map_tag()} with the filtered data set.
\item If you want to lump trees accross multiple censuses, filter all the threes
that you want and change the value of \code{CensusID} so that all trees have the
same value of \code{CensusID}. Then feed \code{map_tag()} with the filtered data set.
}
}
\section{Acknowledgements}{

Useful ideas and guidance came from Suzanne Lao, Stuart Davis, Shameema
Jafferjee Esufa, David Kenfack and Anudeep Singh. Andudeep Sinh also wrote
the algorithm to calculate subquadrats.
}

\examples{
\dontrun{
library(map)
library(fgeo.utils)
library(dplyr)
# Avoid conflict with `stats::filter()`
filter <- dplyr::filter

# Filtering the data to map -----------------------------------------------

# Filter the data you want. For example:
# (see ?top1quad)
want <- filter(
  top1quad,
  CensusID == 6,
  PlotID == 1
)
p <- map_tag(want)
# Visualizing only the first plot of `p`
first(p)
# Printing all plots of `p` to .pdf, with parameters optimized for size letter
pdf("map.pdf", paper = "letter", height = 10.5, width = 8)
p
dev.off()

# Be careful if filtering by DBH: You may unintentionally remove dead trees.
# * Confirm this dataset has dead trees:
# (see `?top4quad`)
dead <- top4quad \%>\%
  add_status_tree() \%>\%
  top(QuadratID) \%>\%
  filter(status_tree == "dead")
select(dead, Tag, Status, status_tree, DBH)
first(map_tag(dead))
# * If you filter by `DBH`, you loose the dead trees becaue their `DBH = NA`
wrong <- filter(dead, DBH > 10)
wrong
# * The right way to do it is to explicietly inlcude rows where DBH = NA
right <- filter(dead, DBH > 10 | is.na(DBH))
right
first(map_quad(right))

# Keeping dead trees with `is.na(DBH)` (e.g. tag 127885.d on the bottom right)
p <- filter(top4quad, DBH > 20 | is.na(DBH))
first(map_tag(p))

# For more complex filtering, see also ?fgeo.utils::rm_dead_twice
multiple_censuses <- bciex::bci12vft_mini
nrow(multiple_censuses)
nrow(rm_dead_twice(multiple_censuses))



# Customizing the maps ----------------------------------------------------

# Common tweaks

p <- map_tag(top1quad, show_page = FALSE, show_subquad = FALSE)
first(p)

p <- map_tag(
  top1quad,
  title_quad = "BCI 2012. Quadrat: ",
  bl = "bottom-left", br = "bottom-right", tr = "top-right", tl = "top-left",
  header = "Line 1: _________\\nLine 2:\\nLine 3:.....................",
  subquad_offset = -1,
  point_size = 3, point_shape = c(17, 6),
  tag_size = 2,
  move_edge = 0.5
)
first(p)



# Themes

library(ggplot2)

p <- map_tag(top1quad, theme = theme_gray())
first(p)

# Tweaking the default theme of map_tag()

small_tweak <- theme_map_tag(legend.position = "bottom")
p <- map_tag(top1quad, theme = small_tweak)
first(p)

large_tweak <- theme(
  legend.position = "bottom",
  legend.title = element_blank(),
  legend.text = element_text(size = 8, colour = "red"),
  text = element_text(size = 11, face = "bold.italic", colour = "white"),
  plot.background = element_rect(fill = "black"),
  plot.margin = margin(2, 2, 2, 2, "cm"),
  strip.background = element_rect(fill = "darkgreen"),
  strip.text = element_text(colour = "white"),
  # make grid to dissapear by matching background colour
  panel.background = element_rect(fill = "lightgreen"),
  panel.grid.minor = element_line(colour = "black", linetype = "dotted"),
  panel.grid.major = element_line(colour = "black")
)
p <- map_tag(top1quad, theme = large_tweak)
first(p)



# Quadrat and subquadrat dimensitons

# Adapting the dimensions of quadrat and subquadrat to the range of qx and qy
# Creating new data set with QX and QY ranging 0-100
smaller <- top1quad
n <- nrow(smaller)
smaller$QX <- sample(0:10, n, replace = TRUE)
smaller$QY <- sample(0:10, n, replace = TRUE)

p <- map_tag(smaller, x_q = 10, x_sq = 2.5)
first(p)

# If limit-lines aren't visible, try extending the grid a little
p <- map_tag(smaller, x_q = 10, x_sq = 2.5, move_edge = 0.25)[1]
first(p)
}
}
\seealso{
\code{\link[graphics:points]{graphics::points()}}, \code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}, \code{\link[ggplot2:theme]{ggplot2::theme()}}
\code{\link[=map_tag_header]{map_tag_header()}}, \code{\link[=theme_map_tag]{theme_map_tag()}}, \code{\link[fgeo.utils:add_subquad]{fgeo.utils::add_subquad()}},
\code{\link[=paginate]{paginate()}}, \link[ggrepel:geom_text_repel]{ggrepel::geom_text_repel}.
}
