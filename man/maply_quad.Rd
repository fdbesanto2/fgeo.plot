% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maply_quad.R
\name{maply_quad}
\alias{maply_quad}
\title{Map trees within a quadrat.}
\usage{
maply_quad(vft, title_quad = "Site Name, YYYY, Quadrat:",
  header = map_quad_header(), theme = theme_map_quad(), lim_min = 0,
  lim_max = 20, subquadrat_side = 5, tag_size = 2, move_edge = 0,
  status_d = "dead")
}
\arguments{
\item{vft}{A dataframe -- specifically, a ForestGEO ViewFullTable.}

\item{title_quad}{A string to use as a title.}

\item{header}{A string to use as a header (see \link{headers}).}

\item{theme}{An object of class theme.}

\item{lim_min, lim_max}{Minimum and maximum limits of the plot area.}

\item{subquadrat_side}{Length in meters of the side of a subquadrat.}

\item{tag_size}{A number giving tag size. Passed to
\link[ggrepel:geom_text_repel]{ggrepel::geom_text_repel}.}

\item{move_edge}{A number to adjust the extension of the grid lines beyond
the plot limits.}

\item{status_d}{A character string indicaing the value of the variable
status that corresponds to dead stems.}
}
\value{
A list which each element is a plot of class ggplot.
}
\description{
Map trees within a quadrat.
}
\examples{
\dontrun{
library(fgeo.map)
library(fgeo.tool)
library(dplyr)
# Avoid conflict with `stats::filter()`
filter <- dplyr::filter

# Filter the data you want. For example:
# (see ?top4quad)
want <- filter(
  top4quad,
  CensusID == 6,
  PlotID == 1
)
p <- maply_quad(want)
# Visualizing only the first plot of `p`
first(p)
# Printing all plots of `p` to .pdf, with parameters optimized for size letter
pdf("map.pdf", paper = "letter", height = 10.5, width = 8)
p
dev.off()

# Be careful if filtering by DBH: You may unintentionally remove dead trees.
# * Confirm this dataset has dead trees:
# (see `?top4quad`)
dead <- top4quad \%>\%
  add_status_tree(status_a = "alive", status_d = "dead") \%>\%
  pick_top(QuadratID) \%>\%
  filter(status_tree == "dead")
select(dead, Tag, Status, status_tree, DBH)
maply_quad(dead)
# * If you filter by `DBH`, you loose the dead trees becaue their `DBH = NA`
wrong <- filter(dead, DBH > 10)
maply_quad(wrong)
# * The right way to do it is to explicietly inlcude rows where DBH = NA
right <- filter(dead, DBH > 10 | is.na(DBH))
maply_quad(right)

# Keeping dead trees with `is.na(DBH)` (e.g. tag 127885.d on the bottom right)
p <- filter(top4quad, DBH > 20 | is.na(DBH))
first(maply_quad(p))

# For more complex filtering, see also ?fgeo.tool::drop_twice_dead)

# Customizing the maps ----------------------------------------------------

# A custom title and header
myheader <- paste(
  " ",
  "Head column 1                     Head column 2                          ",
  " ",
  " ........................................................................",
  " ........................................................................",
  sep = "\\n"
)
# See ?top1quad
maply_quad(top1quad, title_quad = "My Site, 2018. Quad:", header = myheader)

# Tweak the theme with ggplot
library(ggplot2)

maply_quad(
  top1quad,
  title_quad = "My Site, 2018. Quad:",
  header = map_quad_header("spanish"),
  tag_size = 3,
  theme = theme_map_quad(
    axis.text = NULL,  # NULL shows axis.text; element_blank() doesn't.
    plot.title = element_text(size = 15),
    plot.subtitle = element_text(size = 5),
    panel.background = element_rect(fill = "grey")
  )
)
}
}
