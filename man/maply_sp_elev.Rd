% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maply_sp_elev.R
\name{maply_sp_elev}
\alias{maply_sp_elev}
\alias{map_sp_elev}
\alias{map_elev}
\title{Map species and elevation data.}
\usage{
maply_sp_elev(census, elevation = NULL, species = "all", fill = "black",
  shape = 21, point_size = 3, contour_size = 0.5, low = "blue",
  high = "red", hide_legend_color = FALSE, bins = NULL,
  label_elev = TRUE, label_size = 3, label_color = "grey", xyjust = 1,
  fontface = "italic", xlim = NULL, ylim = NULL, custom_theme = NULL)

map_sp_elev(census, elevation = NULL, fill = "black", shape = 21,
  wrap = TRUE, point_size = 3, contour_size = 0.5, low = "blue",
  high = "red", hide_legend_color = FALSE, bins = NULL,
  label_elev = TRUE, label_size = 3, label_color = "grey", xyjust = 1,
  fontface = "italic", xlim = NULL, ylim = NULL, custom_theme = NULL)

map_elev(elevation, contour_size = 0.5, low = "blue", high = "red",
  hide_legend_color = FALSE, bins = NULL, label_elev = TRUE,
  label_size = 3, label_color = "grey", xyjust = 1, fontface = "italic",
  xlim = NULL, ylim = NULL, custom_theme = NULL)
}
\arguments{
\item{census}{A dataframe; specifically, a ForestGEO's census.}

\item{elevation}{A list or dataframe giving ForestGEO's elevation-data.}

\item{species}{A character vector. Each element of the vector must be the
code for one species in the column \code{sp}. This function will produce as
many maps as elements in this vector. The string "all" is a shortcut to
map all unique codes in the column \code{sp}.}

\item{fill}{Character; either a colour or "sp", which maps each species to a
different color.}

\item{shape}{A number giving point size and shape (as in
[graphics::points()]). Passed to [ggplot2::geom_point()].}

\item{point_size}{A number giving point size and shape (as in
[graphics::points()]). Passed to [ggplot2::geom_point()].}

\item{contour_size}{A number giving the size of the contour of elevation
lines. Passed to \code{\link[ggplot2:stat_contour]{ggplot2::stat_contour()}}.}

\item{low}{A string giving a color of the elevation lines representing
low and high elevation.}

\item{high}{A string giving a color of the elevation lines representing
low and high elevation.}

\item{hide_legend_color}{Logical; \code{TRUE} hides the color legend.}

\item{bins}{A number giving the number of elevation lines to map.}

\item{label_elev}{Logical. \code{TRUE} labels the elevation lines with text.}

\item{label_size}{A number (`label_size`) or character
string (`label_color` and `fontface`) giving the size, colour and fontface
of the text labels for the elevation lines.}

\item{label_color}{A number (`label_size`) or character
string (`label_color` and `fontface`) giving the size, colour and fontface
of the text labels for the elevation lines.}

\item{xyjust}{A number to adjust the position of the text labels of the
elevation lines.}

\item{fontface}{A number (`label_size`) or character
string (`label_color` and `fontface`) giving the size, colour and fontface
of the text labels for the elevation lines.}

\item{xlim}{A vector of lenght 2, for example `c(0, 500)`, giving the
minimum and maximum limits of the vertical and horizontal coordinates.}

\item{ylim}{A vector of lenght 2, for example `c(0, 500)`, giving the
minimum and maximum limits of the vertical and horizontal coordinates.}

\item{custom_theme}{A valed \code{\link[ggplot2:theme]{ggplot2::theme()}}. \code{NULL} uses the default
theme \code{\link[=theme_default]{theme_default()}}.}

\item{wrap}{(Not available for \code{maply_sp_elev()}) Logical; \code{TRUE} wraps
multiple maps within the area of a single graphic plot.}
}
\value{
\itemize{
\item \code{maply_sp_elev()} returns a list of ggplots.
\item \code{map_elev()} and \code{map_sp_elev()} return a ggoplot.
}
}
\description{
These functions wrap a number of map elements for convenience:
\itemize{
\item Use \code{map_sp_elev()} to map species and optionally elevation data in a
single page. You can map multiple species on the same plot or you can facet
the output to map each species on a single plot and all plots in a single
page.
\item Use \code{map_elev()} if you want to map only elevation in the sipmlest way.
\item Use \code{maply_sp_elev()} to apply the function \code{map_sp_elev()} to each species
in a census dataset. The output is not a map but a list of maps, one per
species, that can be printed on a .pdf file.
}
}
\section{Comparing ggplot2 and fgeomap}{

These functions wrap functions from the \strong{ggplot2} package. For more
control you can use \strong{ggplot2} directly or smaller wrappers in
\strong{fgeo.map} (see the sections See Also and Examples). \strong{ggplot2}
will give you maximum control and is your best choise if you are already
familiar with it. The wrapper functions in \strong{fgeo.map} focus on
ForestGEO's data: For example, their names commonly mention the variable of a
ForestGEO dataset they work with.

The most important difference between \strong{ggplot2} and \strong{fgeo.map}
is in the way you compose multiple functions to create complex plots. With
\strong{ggplot2} you compose multiple functions with \code{+}. For example,
to apply functions \code{f()} then \code{g()} you do something like this:
\code{f(data) + g()}. With \strong{fgeo.map} you compose multiple functions
in the usual way with \code{g(f(data))}, or in the modern way with the pipe:
\code{f(data)} \code{\%>\%} \code{g()} -- it is up to you. To learn more
about the pipe see http://r4ds.had.co.nz/pipes.html.
}

\examples{
census <- fgeo.tool::top(bciex::bci12s7mini, sp, 2)
elevation <- bciex::bci_elevation

# Map on multiple pages ---------------------------------------------------

p1 <- maply_sp_elev(census)
# Showing first map only.
p1[[1]]

p2 <- maply_sp_elev(census, elevation)
# Showing second map only.
p2[[2]]

# Tweaking
p3 <- maply_sp_elev(
  census,
  elevation,
  species = "all",
  fill = "white",
  shape = 21,
  point_size = 5,
  contour_size = 1,
  low = "grey",
  high = "black",
  hide_legend_color = TRUE,
  bins = 7,
  label_elev = FALSE
)
p3[[1]]

# Map on a single page (maybe multiple panels) ----------------------------

# Simplest way to map elevation data only
map_elev(elevation)

map_sp_elev(census)

map_sp_elev(census, elevation)

# For maximum control, you can compose maps as you like

# Traditional: g(f(x))
contour_elev(map_gx_gy_elev(elevation))

# With the pipe: f(x) \%>\% g()
map_gx_gy_elev(elevation) \%>\%
  contour_elev()

# With traditional sintax: As you add more functions readability decreases.
theme_default(
  wrap(
    add_sp(
      hide_legend_color(
        hide_axis_labels(
          label_elev(
            contour_elev(
              limit_gx_gy(
                map_gx_gy_elev(elevation), 
                xlim = c(0, 1200)
              ),
              contour_size = 0.5
            ),
            label_color = "red"
          )
        )
      ), census, point_size = 5
    ), "sp"
  ), legend.position = "top"
)

# Same with the pipe: As you add more functions readability doesn't change
map_gx_gy_elev(elevation) \%>\%
  limit_gx_gy(xlim = c(0, 1200)) \%>\%
  contour_elev(contour_size = 0.5) \%>\%
  label_elev(label_color = "red") \%>\%
  hide_axis_labels() \%>\%
  hide_legend_color() \%>\%
  add_sp(census, point_size = 5) \%>\%
  wrap("sp") \%>\%
  theme_default(legend.position = "top")
}
\seealso{
\code{\link[=map_gx_gy_elev]{map_gx_gy_elev()}}, \code{\link[=limit_gx_gy]{limit_gx_gy()}}, \code{\link[=add_sp]{add_sp()}}, \code{\link[=contour_elev]{contour_elev()}},
\code{\link[=label_elev]{label_elev()}}, \code{\link[=hide]{hide()}}, \code{\link[=wrap]{wrap()}}

Other `maply_*` functions.: \code{\link{maply_tag}}
}
