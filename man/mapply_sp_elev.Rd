% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mapply_sp_elev.R
\name{mapply_sp_elev}
\alias{mapply_sp_elev}
\alias{map_sp_elev}
\alias{map_elev}
\title{Wrappers to map species and elevation data.}
\usage{
mapply_sp_elev(census, elevation = NULL, species = "all", fill = "black",
  shape = 21, point_size = 3, contour_size = 0.5, low = "blue",
  high = "red", hide_legend_elev = FALSE, bins = NULL,
  label_elev = TRUE, label_size = 3, label_color = "grey", xyjust = 1,
  fontface = "italic", xlim = NULL, ylim = NULL, custom_theme = NULL)

map_sp_elev(census, elevation = NULL, fill = "black", shape = 21,
  wrap = TRUE, point_size = 3, contour_size = 0.5, low = "blue",
  high = "red", hide_legend_elev = FALSE, bins = NULL,
  label_elev = TRUE, label_size = 3, label_color = "grey", xyjust = 1,
  fontface = "italic", xlim = NULL, ylim = NULL, custom_theme = NULL)

map_elev(elevation, contour_size = 0.5, low = "blue", high = "red",
  hide_legend_elev = FALSE, bins = NULL, label_elev = TRUE,
  label_size = 3, label_color = "grey", xyjust = 1, fontface = "italic",
  xlim = NULL, ylim = NULL, custom_theme = NULL)
}
\arguments{
\item{census}{A dataframe; specifically, a ForestGEO's census.}

\item{elevation}{A list or dataframe giving ForestGEO's elevation-data.}

\item{species}{A character vector. Each element of the vector must be the
code for one species in the column \code{sp}. This function will produce as
many maps as elements in this vector. The string "all" is a shortcut to
map all unique codes in the column \code{sp}.}

\item{fill}{Character; either a colour or "sp", which maps each species to a
different color.}

\item{shape, point_size}{A number giving point size and shape (as in
\code{\link[graphics:points]{graphics::points()}}). Passed to \code{\link[ggplot2:geom_points]{ggplot2::geom_points()}}.}

\item{contour_size}{A number giving the size of the contour of elevation
lines. Passed to \code{\link[ggplot2:stat_contour]{ggplot2::stat_contour()}}.}

\item{low, high}{A string giving a color of the elevation lines representing
low and high elevation.}

\item{hide_legend_elev}{Logical; \code{TRUE} hides the color legend.}

\item{bins}{A number giving the number of elevation lines to map.}

\item{label_elev}{Logical. \code{TRUE} labels the elevation lines with text.}

\item{label_size, label_color}{A number (\code{label_size}) or character string
(\code{label_color} and \code{fontface}) giving the size, colour and fontface of
the text labels for the elevation lines.}

\item{xyjust}{A number to adjust the position of the text labels of the
elevation lines.}

\item{xlim, ylim}{A vector of lenght 2, for example \code{c(0, 500)}, giving the
minimum and maximum limits of the vertical and horizontal coordinates.}

\item{custom_theme}{A valed \code{\link[ggplot2:theme]{ggplot2::theme()}}. \code{NULL} uses the default
theme \code{\link[=theme_default]{theme_default()}}.}

\item{wrap}{(Not available for \code{mapply_sp_elev()}) Logical; \code{TRUE} wraps
multiple maps within the area of a single graphic plot.}
}
\value{
\itemize{
\item \code{mapply_sp_elev()} returns a list of ggplots
\item \code{map_elev()} and \code{map_sp_elev()} return a ggoplot.
}
}
\description{
These functions wrap a number of map elements for convenience:
\itemize{
\item \code{mapply_sp_elev()} is a mapper. It wraps applies the function \code{map_sp_elev()}
to each of the given species. It outputs a list of maps, one per species,
that can be printed on a .pdf file.
\item \code{map_sp_elev()} maps species and optionally elevation data.
\item \code{map_elev()} is a smaller, simpler, wrapper to map only elevation data.
}
}
\examples{
census <- fgeo.tool::top(bciex::bci12s7mini, sp, 2)

elevation <- bciex::bci_elevation
head(elevation)
elevation <- fgeo.tool::clean_structure_elev(bciex::bci_elevation)
head(elevation)

# Showing first plot only. 
p <- mapply_sp_elev(census)[[1]]
p[[1]]


p <- mapply_sp_elev(
  census,
  elevation,
  species = spp,
  fill = "white",
  shape = 21,
  point_size = 5,
  contour_size = 1,
  low = "grey",
  high = "black",
  hide_legend_elev = TRUE,
  bins = 7,
  label_elev = FALSE
)
p[[1]]

# Same but outputs a plot, not a list of plots
map_sp_elev(census, elevation)

# Similar but maps elevation exclusively
map_elev(elevation)

# For maximum control, you can compose maps as you like
map_gx_gy_elev(elevation) \%>\% 
  limit_gx_gy(xlim = c(0, 1200)) \%>\% 
  contour_elev(contour_size = 0.5) \%>\% 
  label_elev(label_color = "red") \%>\% 
  hide_axis_labels() \%>\% 
  hide_legend_elev() \%>\% 
  add_sp(census, point_size = 5) \%>\% 
  facet_h_sp() \%>\% 
  theme_default(legend.position = "top")
}
\seealso{
map_gx_gy_elev
}
