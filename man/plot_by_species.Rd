% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_by_species.R
\name{plot_by_species}
\alias{plot_by_species}
\alias{plot_by_species.sp}
\alias{plot_by_species.sp_elev}
\title{List plots of species distribution and topography (good for pdf output).}
\usage{
plot_by_species(object, ...)

\method{plot_by_species}{sp}(object, ...)

\method{plot_by_species}{sp_elev}(object, ...)
}
\arguments{
\item{object}{An object created with  \code{\link[=sp]{sp()}} or \code{\link[=sp_elev]{sp_elev()}}.0}

\item{...}{Other arguments passed to methods.}

\item{species}{A character vector. Each element of the vector must be the
code for one species in the column \code{sp}. This function will produce as
many maps as elements in this vector. The string "all" is a shortcut to
map all unique codes in the column \code{sp}.}
}
\description{
This function extends the functionality of \code{\link[=autoplot.sp]{autoplot.sp()}} and
\code{\link[=autoplot.sp]{autoplot.sp()}} and returns not a single plot but a list of plots. It is
ideal to print a .pdf file with one plot per page.

Automatically plots the variables \code{sp} and optionally \code{elev} of a
ForestGEO-like dataset of class 'sp' or sp_elev'.

\preformatted{Create a 'sp' `object` with:
object <- sp(DATA-WITH-VARIABLE-sp)

Create a 'sp_elev' `object` with:
object <- sp_elev(DATA-WITH-VARIABLE-sp, DATA-WITH-VARIABLE-elev)
}

See sections \strong{Usage} and \strong{Examples}.
}
\section{Comparison with ggplot2}{

These functions wrap functions from the \strong{ggplot2} package. For more
control you can use \strong{ggplot2} directly or smaller wrappers in
\strong{fgeo.map} (see the sections See Also and Examples). \strong{ggplot2}
will give you maximum control and is your best choice if you are already
familiar with it. The wrapper functions in \strong{fgeo.map} focus on
ForestGEO's data: For example, their names commonly mention the variable of a
ForestGEO dataset they work with.

The most important difference between \strong{ggplot2} and \strong{fgeo.map}
is in the way you compose multiple functions to create complex plots. With
\strong{ggplot2} you compose multiple functions with \code{+}. For example,
to apply functions \code{f()} then \code{g()} you do something like this:
\code{f(data) + g()}. With \strong{fgeo.map} you compose multiple functions
in the usual way with \code{g(f(data))}, or in the modern way with the pipe:
\code{f(data)} \code{\%>\%} \code{g()} -- it is up to you. To learn more
about the pipe see http://r4ds.had.co.nz/pipes.html.
}

\examples{
# Small dataset with a few species for quick examples
some_sp <- c("PREMON", "CASARB")
census <- subset(fgeo.data::luquillo_tree5_random, sp \%in\% some_sp)
elevation <- fgeo.data::luquillo_elevation

plot_by_species(sp(census))
plot_by_species(sp_elev(census, elevation))
}
\seealso{
\code{\link[=autoplot]{autoplot()}}, \code{\link[=sp]{sp()}}, \code{\link[=sp_elev]{sp_elev()}}.

Other autoplots: \code{\link{autoplot.elev}},
  \code{\link{autoplot.fgeo_habitat}},
  \code{\link{autoplot.sp_elev}}, \code{\link{autoplot.sp}}

Other functions to create a list of plots: \code{\link{plot_dbh_bubbles_by_quadrat}},
  \code{\link{plot_tag_status_by_subquadrat}}
}
\concept{autoplots}
\concept{functions to create a list of plots}
